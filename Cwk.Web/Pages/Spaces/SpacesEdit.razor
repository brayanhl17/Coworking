
@inject NavigationManager NavigationManager
@inject IRequestService RequestService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="space" Class="pa-4">
            <MudText Typo="Typo.h5" Class="mb-4">Editar Espacio</MudText>
            <MudTextField @bind-Value="space.Name" Label="Nombre del Espacio" Required="true" Variant="Variant.Outlined" Class="mb-3" />
            <MudTextField @bind-Value="space.Description"
                          Label="Descripción"
                          Required="true"
                          Variant="Variant.Outlined"
                          Class="mb-3"
                          Lines="4"
                          MaxLength="500" />
            <MudTextField @bind-Value="space.Location" Label="Ubicación" Required="true" Variant="Variant.Outlined" Class="mb-3" />
            <MudTextField @bind-Value="space.Capacity" Label="Capacidad" Required="true" />
            <MudTextField @bind-Value="space.PricePerHour" Label="Precio por Hora($)" Type="number" Required="true" />
            <MudSelect T="SpaceType" Label="Tipo de Espacio" @bind-Value="space.SpaceType" Required="true" Variant="Variant.Outlined" Class="mb-3">
                @foreach (SpaceType type in Enum.GetValues(typeof(SpaceType)))
                {
                    <MudSelectItem T="SpaceType" Value="type">@type.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="int" Label="Amenidades" SelectedValues="selectedAmenityIds" SelectedValuesChanged="OnAmenitiesChanged" MultiSelection="true" Variant="Variant.Outlined" Class="mb-3">
                @foreach (var amenity in Amenities)
                {
                    <MudSelectItem T="int" Value="amenity.Id">@amenity.Name</MudSelectItem>
                }
            </MudSelect>
            <MudText Typo="Typo.subtitle1" Class="mb-2">Servicios Adicionales</MudText>
            @foreach (var amenity in selectedAmenities)
            {
                <MudChip T="string" Color="Color.Secondary" Variant="Variant.Outlined" Class="ma-1">@amenity.Name</MudChip>
            }
            <MudText Typo="Typo.subtitle1" Class="mb-2">Imagen del Espacio</MudText>

            @* Mostrar imagen actual si existe *@
            @if (!string.IsNullOrEmpty(space.ImageUrl) || !string.IsNullOrEmpty(imageUrl))
            {
                <MudCard Class="mb-3" Style="max-width: 300px;">
                    <MudCardContent Class="pa-2">
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Imagen actual:</MudText>
                        <MudImage Src="@(!string.IsNullOrEmpty(imageUrl) ? imageUrl : space.ImageUrl)"
                                  Alt="Imagen del Espacio"
                                  Width="280"
                                  Height="200"
                                  ObjectFit="ObjectFit.Cover"
                                  Class="rounded" />
                    </MudCardContent>
                </MudCard>
            }

            <MudFileUpload T="IBrowserFile" FilesChanged="OnInputFile">
                <ActivatorContent>
                    <MudStack Direction="Direction.Horizontal" Spacing="2" AlignItems="AlignItems.Center">
                        <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.PhotoCamera" />
                        <MudText Typo="Typo.body1">
                            @if (!string.IsNullOrEmpty(space.ImageUrl) || !string.IsNullOrEmpty(imageUrl))
                            {
                                <span>Cambiar foto</span>
                            }
                            else
                            {
                                <span>Seleccionar foto</span>
                            }
                        </MudText>
                    </MudStack>
                </ActivatorContent>
            </MudFileUpload>

            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled">Guardar</MudButton>
            <MudButton OnClick="@(() => MudDialog.Cancel())" Color="Color.Secondary" Variant="Variant.Text" Class="ml-2">Cancelar</MudButton>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public SpaceDetailsDto space { get; set; } = new SpaceDetailsDto();
    private EditSpaceDto spaceDto = new EditSpaceDto();
    private string imageUrl = string.Empty;

    private List<Amenity> Amenities = new();
    private List<Amenity> selectedAmenities = new();
    private HashSet<int> selectedAmenityIds = new();
    public bool Active { get; set; } = true;

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;
    private MudForm form = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/amenities";
        Amenities = await RequestService.GetAsync<List<Amenity>>(url);

        var url2 = $"api/amenities/spaceId/{space.Id}";
        selectedAmenities = await RequestService.GetAsync<List<Amenity>>(url2);

        // Inicializar los IDs de amenidades seleccionadas
        selectedAmenityIds = selectedAmenities.Select(a => a.Id).ToHashSet();
    }

    private async Task OnInputFile(IBrowserFile file)
    {
        imageUrl = await UploadFiles.UploadImagesAsync(file);
    }

    private void OnAmenitiesChanged(IEnumerable<int> values)
    {
        selectedAmenityIds = values.ToHashSet();
        selectedAmenities = Amenities.Where(a => selectedAmenityIds.Contains(a.Id)).ToList();
    }

    private async Task Submit()
    {
        if (form.IsValid)
        {
            try
            {
                spaceDto.Id = space.Id;
                spaceDto.Capacity = space.Capacity;
                spaceDto.Description = space.Description;
                // Si no se seleccionó una nueva imagen, mantener la actual
                spaceDto.ImageUrl = !string.IsNullOrEmpty(imageUrl) ? imageUrl : space.ImageUrl;
                spaceDto.Location = space.Location;
                spaceDto.Name = space.Name;
                spaceDto.PricePerHour = space.PricePerHour;
                spaceDto.SpaceType = space.SpaceType;
                spaceDto.IsActive = Active;
                spaceDto.AmenityIds = selectedAmenityIds.ToList();

                var url = $"api/spaces/{space.Id}";
                var response = await RequestService.PutAsync<EditSpaceDto>(url, spaceDto);
                if (response != null)
                {
                    MudDialog.Close(DialogResult.Ok(response));
                }
                else
                {
                    Snackbar.Add("Error al editar el espacio.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }
}
